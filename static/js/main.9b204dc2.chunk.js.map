{"version":3,"sources":["components/addTodoForm.js","components/todo.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["AddTodoForm","_ref","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","className","type","placeholder","onChange","e","target","onClick","preventDefault","Todo","todo","index","completTodo","deleteTodo","buttonText","completed","id","style","textDecoration","role","aria-hidden","item","HeaderDiv","href","App","data","fetch","then","response","json","push","todos","updateTodo","NewTodos","toConsumableArray","splice","header","map","components_todo","key","addTodoForm","newTodos","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b204dc2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction AddTodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form className=\"ui success form\">\n      <div className=\"field\">\n        <label>Add Todo Item</label>\n        <div className=\"ui input\">\n          <input\n            type=\"text\"\n            placeholder=\"Add todo item\"\n            value={value}\n            onChange={e => setValue(e.target.value)}\n          />\n        </div>\n        <button onClick={handleSubmit} className=\"ui button\">\n          Add\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default AddTodoForm;","import React from \"react\";\n\nconst Todo = ({ todo, index, completTodo, deleteTodo }) => {\n  var buttonText = todo.completed ? \"completed\" : \"complete\";\n  return (\n    <div\n      id=\"main\"\n      style={{ textDecoration: todo.completed ? \"line-through\" : \"\" }}\n      role=\"list\"\n      className=\"ui divided middle aligned list\"\n    >\n      <div role=\"listitem\" className=\"item\">\n        <div className=\"right floated content\">\n          <button onClick={() => completTodo(index)} className=\"ui button\">\n            {buttonText}\n          </button>\n          <button onClick={() => deleteTodo(index)} className=\"ui button\">\n            Delete\n          </button>\n        </div>\n        <i aria-hidden=\"true\" className=\"spinner loading icon\" />\n        <i aria-hidden=\"true\" className=\"certificate loading icon\" />\n        <i aria-hidden=\"true\" className=\"asterisk loading icon\" />\n        <div className=\"content\">{todo.item}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;","import React from \"react\";\n\nfunction HeaderDiv() {\n  return (\n    <div className=\"ui message\">\n      <div className=\"header\">About</div>\n      <p>\n        This is a simple application to help you level up on React Hooks. There\n        is no data persistence as this will be available in the next tutorial.\n      </p>\n      <p>\n        Below are links to the developers LinkedIn and Github accounts\n        respectively\n      </p>\n      <a href=\"https://www.linkedin.com/in/erastus-ruiru-4a2ab2b3/\">\n        <button className=\"ui linkedin button\">\n          <i aria-hidden=\"true\" className=\"linkedin icon\" /> LinkedIn\n        </button>\n      </a>\n      <a href=\"https://github.com/Ruiru11\">\n        <button className=\"ui github button\">\n          <i aria-hidden=\"true\" className=\"github icon\" /> github\n        </button>\n      </a>\n    </div>\n  );\n}\n\nexport default HeaderDiv;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AddTodoForm from \"./components/addTodoForm\";\nimport Todo from \"./components/todo\";\nimport HeaderDiv from \"./components/header\";\n\nfunction App() {\n  const data = []\n  fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n  .then(response => response.json())\n  .then(json => {\n    data.push(json)\n  })\n  const [todos, updateTodo] = useState([\n    {\n      item: \"learn react hooks\",\n      completed: false\n    },\n    {\n      item: \"create a simple app to illustarate the above\",\n      completed: false\n    },\n    {\n      item: \"push to git hub\",\n      completed: false\n    }\n  ]);\n\n  const addTodo = item => {\n    const newTodos = [...todos, { item }];\n    updateTodo(newTodos);\n  };\n\n  const completTodo = index => {\n    const NewTodos = [...todos];\n    NewTodos[index].completed = true;\n    updateTodo(NewTodos);\n  };\n\n  const deleteTodo = index => {\n    const NewTodos = [...todos];\n    NewTodos.splice(index, 1);\n    updateTodo(NewTodos);\n  };\n  return (\n    <div id=\"role\" role=\"list\" className=\"ui divided relaxed list\">\n      <HeaderDiv />\n      <div role=\"listitem\" className=\"item\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completTodo={completTodo}\n            deleteTodo={deleteTodo}\n          />\n        ))}\n        <AddTodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}